#Область СлужебныйПрограммныйИнтерфейс

// Возвращает прокси сервиса обмена данными.
//
// Возвращаемое значение:
// WSПрокси
//
Функция ПолучитьПрокси(СообщениеОбОшибке = "") Экспорт
	
	Пользователь = СокрЛП(Константы.ПользовательЦентральнойБазы.Получить());
	Пароль		 = Константы.ПарольПользователяЦентральнойБазы.Получить();
	Адрес		 = Константы.АдресЦентральнойБазы.Получить();
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	Конецесли;
	
	Адрес = СокрЛП(Адрес) + "/ws/bit_ma_CashFlowStatement?wsdl";
	
	Попытка
		
		Определения = Новый WSОпределения(Адрес, Пользователь, Пароль);
		Прокси = Новый WSПрокси(Определения, "http://www.FirstBit.ru/bit_ma_CashFlowStatement", "bit_ma_CashFlowStatement", "bit_ma_CashFlowStatementSoap");
		Прокси.Пользователь = Пользователь;
		Прокси.Пароль 		= Пароль;
		
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("СоединениеСЦБУстановлено", Истина);
		
		Возврат Прокси;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		Описание = Инфо.Причина.Описание;
		
		Если Найти(Описание, "При создании описания сервиса произошла ошибка")
			Или Найти(Описание, "Ошибка HTTP") Тогда
			СообщениеОбОшибке = НСтр("ru='По указанному адресу сервис недоступен.';en='The service is not available.'");
		Иначе
			СообщениеОбОшибке = Инфо.Причина.Описание;
		КонецЕсли;
		
		ОбщегоНазначенияВызовСервера.УстановитьЗначениеКонстанты("СоединениеСЦБУстановлено", Ложь);
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // ПолучитьПрокси()

// Сервисная функция, возвращает URI веб-сервиса.
//
Функция URIПространстваИменСервиса() Экспорт
	
	Возврат "http://www.FirstBit.ru/bit_ma_CashFlowStatement";
	
КонецФункции // URIПространстваИменСервиса()

// Сервисная функция для начальной инициализации БД, проверяет что синхронизация данных ранее не проводилась
//
Функция ОбменаНеБыло() Экспорт
	
	Узел = ПланыОбмена.бит_мп_МобильноеПриложениеДДС.ЭтотУзел();
	Возврат Не ЗначениеЗаполнено(Узел.Код);
	
КонецФункции // ОбменаНеБыло()

// Функция проверяет наличие настроек обмена.
//
Функция ЕстьНастройкиОбмена() Экспорт
	
	Возврат ЗначениеЗаполнено(Константы.АдресЦентральнойБазы.Получить());
	
КонецФункции // ЕстьНастройкиОбмена()

// Возвращает настройку входа в центральную базу.
//
// Возвращаемое значение:
// Булево
//
Функция ВходВЦентральнуюБазуВыполнен() Экспорт
	
	Возврат Константы.СоединениеСЦБУстановлено.Получить();
	
КонецФункции // ВходВЦентральнуюБазуВыполнен()

// Возвращает ссылку на узел центральной базы
//
// Возвращаемое значение:
// УзелЦентральнойБазы - ПланыОбменаСсылка.бит_мп_МобильноеПриложениеДДС
//
Функция УзелЦентральнойБазы() Экспорт
	
	УзелЦентральнойБазы = ПланыОбмена.бит_мп_МобильноеПриложениеДДС.НайтиПоКоду("001");
	
	Если НЕ ЗначениеЗаполнено(УзелЦентральнойБазы) Тогда
		ОбъектУзел = ПланыОбмена.бит_мп_МобильноеПриложениеДДС.СоздатьУзел();
		ОбъектУзел.Код = "001";
		ОбъектУзел.Наименование = Нстр("ru = 'Узел обмена с информационной базой'");
		ОбъектУзел.Записать();
		УзелЦентральнойБазы = ОбъектУзел.Ссылка;
	КонецЕсли;
	
	Возврат УзелЦентральнойБазы;
	
КонецФункции

// Возвращает структуру ответа в зависимости от этапа обмена
//
// Возвращаемое значение:
// СтруктураОтвета - Структура
//
Функция ПолучитьСтруктуруОтветаОбмена(Этап) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Успешно"					, Ложь);
	СтруктураОтвета.Вставить("ЕстьОшибки"				, Ложь);
	СтруктураОтвета.Вставить("СообщениеОбОшибке"		, "");
	СтруктураОтвета.Вставить("КодМобильногоУстройства"	, "");
	
	Если Этап = 1 Тогда // Начало обмена
		
		СтруктураОтвета.Вставить("НомерОтправленного"		, 0);
		СтруктураОтвета.Вставить("НомерПринятого"			, 0);
		СтруктураОтвета.Вставить("ИмяМобильногоУстройства"	, "");
		СтруктураОтвета.Вставить("УдалитьДанныеНаУстройстве", Ложь);
		
	ИначеЕсли Этап = 2 Тогда // Получить изменения данных
		
		СтруктураОтвета.Вставить("КолВыгружено", 0);
		
	ИначеЕсли Этап = 3 Тогда // Отправка изменения данных
		
		СтруктураОтвета.Вставить("СообщениеОбмена", "");
		
	ИначеЕсли Этап = 4 Тогда // ПолучитьДанные
		
		СтруктураОтвета.Вставить("Остатки", Неопределено);
		СтруктураОтвета.Вставить("Обороты", Неопределено);
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции // ПолучитьСтруктуруОтветаОбмена()

// Процедура обнуляет номер принятого и отправленного сообщений на узле плана обмена.
//
Процедура ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена(УзелОбмена) Экспорт
	
	УзелОбменаОбъект = УзелОбмена.ПолучитьОбъект();
	УзелОбменаОбъект.НомерОтправленного = 0;
	УзелОбменаОбъект.НомерПринятого 	= 0;
	УзелОбменаОбъект.Записать();
	
КонецПроцедуры // ПереинициализироватьСчетчикиСообщенийНаУзлеПланаОбмена()

// Процедура регистрирует изменения, для всех данных, входящих в состав плана обмена
// Параметры:
//  УзелОбмена - узел плана обмена, для которого регистрируются изменения
// 
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт
	
	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
	
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЭлементСоставаПланаОбмена.Метаданные);
	КонецЦикла;
	
КонецПроцедуры // ЗарегистрироватьИзмененияДанных()

#КонецОбласти