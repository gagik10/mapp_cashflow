&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьАвторизацию();
	
	Если АвторизацияПройдена Тогда
		ПерейтиНаСтраницуСоединения();
	Иначе
		ПерейтиНаСтраницуАвторизации();
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Проверяем готовность к обмену
	Если Не ОбменМобильноеПриложениеВызовСервера.ЕстьНастройкиОбмена() Тогда
		
		ЭтапОбмена = Новый СписокЗначений;
		ЭтапОбмена.Добавить(КодВозвратаДиалога.ОК, НСтр("ru='Заполнить';en='Fill'"));
		ЭтапОбмена.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отменить';en='Cancel'"));
		ТекстВопроса = НСтр("ru='Не заполнены настройки синхронизации с информационной базой."
		"Заполнить настройки?';en='Not filled with database sync settings."
		"Fill in the settings?'");
		ТекстЗаголовка = НСтр("ru='Синхронизация данных';en='Data Synchronization'");
		Ответ = Вопрос(ТекстВопроса, ЭтапОбмена, 0,, ТекстЗаголовка);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			Возврат;
			
		Иначе
			
			ОткрытьФормуМодально("ОбщаяФорма.НастройкиСинхронизации", Новый Структура("ВызовИзФормыОбмена", Истина));
			Если Не ОбменМобильноеПриложениеВызовСервера.ЕстьНастройкиОбмена() Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьАвторизацию();
		
	Конецесли;
	
	Если Элементы.ОбменДанными.ТекущаяСтраница = Элементы.СинхронизацияДанных Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьПолучениеИзмененийУзла");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьОтправкуИзмененийУзла");
	
	Оповестить("ПрошелОбмен");
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

#Область ДействияКомандныхПанелейФормы

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	ВыполнитьСоединение();
	
КонецПроцедуры // Синхронизировать()

&НаКлиенте
Процедура Отменить(Команда)
	
	Закрыть();
	
КонецПроцедуры // Отменить()

&НаКлиенте
Процедура ВвестиПароль(Команда)
	
	СтрНачалоОбмена = Неопределено;
	
	УстановитьПараметрыАвторизации();
	
	ПерейтиНаСтраницуСоединения();
	
	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

#Область Авторизация

&НаСервере
Процедура ЗаполнитьАвторизацию()
	
	АвторизацияПройдена = Ложь;
	
	НаборКонстант = Константы.СоздатьНабор("ПользовательЦентральнойБазы, ПарольПользователяЦентральнойБазы");
	НаборКонстант.Прочитать();
	
	Пользователь = НаборКонстант.ПользовательЦентральнойБазы;
	Пароль		 = НаборКонстант.ПарольПользователяЦентральнойБазы;
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		Возврат;
	КонецЕсли;
	
	АвторизацияПройдена = Истина;
	
КонецПроцедуры // ЗаполнитьАвторизацию()

&НаСервере
Процедура ОбработатьОшибкуАвторизации()
	
	АвторизацияПройдена = Ложь;
	
	Элементы.Декорация7.Заголовок = НСтр("en='Authorization Error."
	"Specify the user name and password.';ru='Ошибка авторизации."
	"Уточните имя пользователя и пароль.'");
	
	ПерейтиНаСтраницуАвторизации(Истина);
	
КонецПроцедуры // ОбработатьОшибкуАвторизации()

&НаСервере
Процедура ПерейтиНаСтраницуАвторизации(Ошибка = Ложь)
	
	УстановитьВидимостьСтраниц(0);
	Заголовок = НСтр("ru='Авторизация';en='Authorization'");
	
	Если Ошибка Тогда
		Заголовок = НСтр("ru='Уточните параметры подключения';en='Specify the Connection Settings'");
	КонецЕсли;
	
	НаборКонстант = Константы.СоздатьНабор("ПользовательЦентральнойБазы, ПарольПользователяЦентральнойБазы");
	НаборКонстант.Прочитать();
	
	Пользователь = НаборКонстант.ПользовательЦентральнойБазы;
	Пароль 		 = НаборКонстант.ПарольПользователяЦентральнойБазы;
	
КонецПроцедуры // ПерейтиНаСтраницуАвторизации()

&НаСервере
Процедура УстановитьПараметрыАвторизации()
	
	НаборКонстант = Константы.СоздатьНабор("ПользовательЦентральнойБазы, ПарольПользователяЦентральнойБазы");
	
	НаборКонстант.ПользовательЦентральнойБазы		= Пользователь;
	НаборКонстант.ПарольПользователяЦентральнойБазы = Пароль;
	
	НаборКонстант.Записать();
	
	АвторизацияПройдена = Истина;
	
КонецПроцедуры // УстановитьПараметрыАвторизации()

#КонецОбласти

#Область Соединение

&НаКлиенте
Процедура ВыполнитьСоединение()
		
	Если АвторизацияПройдена Тогда
		
		ПерейтиНаСтраницуСоединения();
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
		ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
	Иначе
		
		ПерейтиНаСтраницуАвторизации();
		
	КонецЕсли;
	
КонецПроцедуры // СинхронизироватьДанные()

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если СтрНачалоОбмена = Неопределено Тогда
		СтрНачалоОбмена = ОбменМобильноеПриложениеСервер.НачатьОбмен();
	Иначе
		
		Если СтрНачалоОбмена.Успешно Тогда
			ОбработатьСоединениеУстановлено(1);
			ВыполнитьОбменаДанными();
		Иначе
			
			Если Найти(СтрНачалоОбмена.СообщениеОбОшибке, "Аутентификация") > 0 Тогда
				ОбработатьОшибкуАвторизации();
			Иначе
				ОбработатьСоединениеУстановлено(2, СтрНачалоОбмена.СообщениеОбОшибке);
			КонецЕсли;
			
			ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
			СтрНачалоОбмена = Неопределено;
			
		Конецесли;
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина
	);
	
КонецПроцедуры // Подключаемый_ПроверитьВыполнениеЗадания()

&НаСервере
Процедура ОбработатьСоединениеУстановлено(ЭтапОбмена, СообщениеОбОшибке = "")
	
	Если ЭтапОбмена = 0 Тогда
		
		Элементы.ГруппаУстанавливается.Видимость	= Истина;
		Элементы.ГруппаУстанавлено.Видимость		= Ложь;
		Элементы.ГруппаНеУстанавлено.Видимость		= Ложь;
		
	ИначеЕсли ЭтапОбмена = 1 Тогда
		
		Элементы.ГруппаУстанавливается.Видимость	= Ложь;
		Элементы.ГруппаУстанавлено.Видимость		= Истина;
		Элементы.ГруппаНеУстанавлено.Видимость		= Ложь;
		
	ИначеЕсли ЭтапОбмена = 2 Тогда
		
		Если ПустаяСтрока(СообщениеОбОшибке) Тогда
			Элементы.Декорация17.Заголовок = НСтр("ru='Соединение не установлено."
			"Проверьте настройки синхронизации.';en='The connection is not established.'");
		Иначе
			Элементы.Декорация17.Заголовок = СообщениеОбОшибке;
		КонецЕсли;
		
		Элементы.ГруппаУстанавливается.Видимость	= Ложь;
		Элементы.ГруппаУстанавлено.Видимость		= Ложь;
		Элементы.ГруппаНеУстанавлено.Видимость		= Истина;
		Элементы.КнопкаОК.Видимость = Истина;
		
	Иначе
		
		Элементы.ГруппаУстанавливается.Видимость	= Ложь;
		Элементы.ГруппаУстанавлено.Видимость		= Ложь;
		Элементы.ГруппаНеУстанавлено.Видимость		= Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаСинхронизация.Видимость          = Ложь;
	
КонецПроцедуры // ОбработатьСоединениеУстановлено()

&НаСервере
Процедура ПерейтиНаСтраницуСоединения()
	
	УстановитьВидимостьСтраниц(1);
	Заголовок = НСтр("ru = 'Синхронизация данных'");
	
КонецПроцедуры // ПерейтиНаСтраницуСоединения()

#КонецОбласти

#Область Обмен

&НаКлиенте
Процедура ВыполнитьОбменаДанными()
	
	ОбработатьСтатусОбмена(0);
	УстановитьВидимостьСтраниц(3);
	
	ПолучитьИзмененияУзла();
	ОтправитьИзмененияУзла();
	
КонецПроцедуры // ВыполнениеОбменаДанными()

&НаКлиенте
Процедура ПолучитьИзмененияУзла()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьПолучениеИзмененийУзла");
	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПолучениеИзмененийУзла", 1, Истина);
	
КонецПроцедуры // ПолучитьИзмененияУзла()

&НаКлиенте
Процедура ОтправитьИзмененияУзла()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьОтправкуИзмененийУзла");
	ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьОтправкуИзмененийУзла", 1, Истина);
	
КонецПроцедуры // ОтправитьИзмененияУзла()

&НаКлиенте
Процедура Подключаемый_ПроверитьПолучениеИзмененийУзла()
	
	Если СтрДанныеПолучены = Неопределено Тогда
		СтрДанныеПолучены = ОбменМобильноеПриложениеСервер.ПолучитьИзмененияУзла(СтрНачалоОбмена.КодМобильногоУстройства);
	Иначе
		
		ОбновитьОтображениеДанных();
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьПолучениеИзмененийУзла");
		
		Если СтрДанныеПолучены.Успешно Тогда
			Возврат;
		ИначеЕсли СтрДанныеПолучены.ЕстьОшибки Тогда
			ОбработатьСтатусОбмена(2, СтрДанныеПолучены.СообщениеОбОшибке);
			УстановитьВидимостьСтраниц(2);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьПолучениеИзмененийУзла",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина
	);
	
КонецПроцедуры // Подключаемый_ПроверитьПолучениеИзмененийУзла()

&НаКлиенте
Процедура Подключаемый_ПроверитьОтправкуИзмененийУзла()
	
	Если СтрДанныеОтправлены = Неопределено Тогда
		СтрДанныеОтправлены = ОбменМобильноеПриложениеСервер.ОтправитьИзмененияУзла(СтрНачалоОбмена.КодМобильногоУстройства);
	Иначе
		
		ОбновитьОтображениеДанных();
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьОтправкуИзмененийУзла");
		
		Если СтрДанныеОтправлены.Успешно Тогда
			ОбработатьСтатусОбмена(1);
		ИначеЕсли СтрДанныеОтправлены.ЕстьОшибки Тогда
			ОбработатьСтатусОбмена(2, СтрДанныеОтправлены.СообщениеОбОшибке);
			УстановитьВидимостьСтраниц(2);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьОтправкуИзмененийУзла",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина
	);
	
КонецПроцедуры // Подключаемый_ПроверитьОтправкуИзмененийУзла()

&НаСервере
Процедура ОбработатьСтатусОбмена(ЭтапОбмена, СообщениеОбОшибке = "")
	
	Если ЭтапОбмена = 0 Тогда
		
		Элементы.ГруппаСинхронизацияВыполняется.Видимость		= Истина;
		Элементы.ГруппаСинхронизацияЗавершенаУспешно.Видимость	= Ложь;
		Элементы.ГруппаСинхронизацияЗавершенаСОшибкой.Видимость = Ложь;
		Элементы.КнопкаОтмена.Заголовок							= НСтр("ru='Остановить';en='Stop'");
		
	ИначеЕсли ЭтапОбмена = 1 Тогда
		
		Элементы.ГруппаСинхронизацияВыполняется.Видимость		= Ложь;
		Элементы.ГруппаСинхронизацияЗавершенаУспешно.Видимость	= Истина;
		Элементы.ГруппаСинхронизацияЗавершенаСОшибкой.Видимость = Ложь;
		Элементы.КнопкаОтмена.Заголовок							= НСтр("ru='Закрыть';en='Close'");
		
	ИначеЕсли ЭтапОбмена = 2 Тогда
		
		Если ПустаяСтрока(СообщениеОбОшибке) Тогда
			ТекстЗаголовка = НСтр("ru='Не удалось выполнить синхронизацию данных."
			"Попробуйте еще раз.';en='Unable to synchronize the data."
			"For details, see. in the central database.'"
			);
		Иначе
			ТекстЗаголовка = СообщениеОбОшибке;
		КонецЕсли;
		
		Элементы.ГруппаСинхронизацияВыполняется.Видимость		= Ложь;
		Элементы.ГруппаСинхронизацияЗавершенаУспешно.Видимость	= Ложь;
		Элементы.ГруппаСинхронизацияЗавершенаСОшибкой.Видимость = Истина;
		Элементы.Декорация23.Заголовок							= ТекстЗаголовка;
		Элементы.КнопкаОтмена.Заголовок							= НСтр("ru='Закрыть';en='Close'");
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьСтатусОбмена()

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

&НаКлиенте
Процедура ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания) Экспорт
	
	ПараметрыОбработчикаОжидания = Новый Структура(
	"МинимальныйИнтервал,МаксимальныйИнтервал,ТекущийИнтервал,КоэффициентУвеличенияИнтервала", 0.5, 5, 1, 1.4);
	
КонецПроцедуры // ИнициализироватьПараметрыОбработчикаОжидания()

&НаСервере
Процедура УстановитьВидимостьСтраниц(ЭтапОбмена)
	
	Если ЭтапОбмена = 0 Тогда
		Элементы.Авторизация.Видимость					= Истина;
		Элементы.СинхронизацияДанных.Видимость			= Ложь;
		Элементы.ГруппаУстановкаСоединения.Видимость	= Истина;
		Элементы.ГруппаСинхронизация.Видимость			= Ложь;
		Элементы.ОбменДанными.ТекущаяСтраница			= Элементы.Авторизация;
		Элементы.КнопкаОК.Видимость						= Истина;
		Элементы.КнопкаОК.Заголовок						= НСтр("ru='Продолжить';en='Continue'");
		Элементы.КнопкаОК.ИмяКоманды					= "ВвестиПароль";
		
	ИначеЕсли ЭтапОбмена = 1 Тогда
		Элементы.Авторизация.Видимость					= Ложь;
		Элементы.СинхронизацияДанных.Видимость			= Истина;
		Элементы.ГруппаУстановкаСоединения.Видимость	= Истина;
		Элементы.ГруппаСинхронизация.Видимость			= Ложь;
		Элементы.ОбменДанными.ТекущаяСтраница			= Элементы.СинхронизацияДанных;
		Элементы.КнопкаОК.Видимость						= Ложь;
		Элементы.КнопкаОК.Заголовок						= НСтр("ru='Соединиться';en='Connect'");
		
	ИначеЕсли ЭтапОбмена = 2 Тогда
		Элементы.Авторизация.Видимость					= Ложь;
		Элементы.СинхронизацияДанных.Видимость			= Истина;
		Элементы.ГруппаУстановкаСоединения.Видимость	= Ложь;
		Элементы.ГруппаСинхронизация.Видимость			= Истина;
		Элементы.ОбменДанными.ТекущаяСтраница			= Элементы.СинхронизацияДанных;
		Элементы.КнопкаОК.Видимость						= Истина;
		Элементы.КнопкаОК.Заголовок						= НСтр("ru='Синхронизировать';en='Synchronize'");
		
	ИначеЕсли ЭтапОбмена = 3 Тогда
		Элементы.Авторизация.Видимость					= Ложь;
		Элементы.СинхронизацияДанных.Видимость			= Истина;
		Элементы.ГруппаУстановкаСоединения.Видимость	= Ложь;
		Элементы.ГруппаСинхронизация.Видимость			= Истина;
		Элементы.ОбменДанными.ТекущаяСтраница			= Элементы.СинхронизацияДанных;
		Элементы.КнопкаОК.Видимость						= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьСтраниц()

#КонецОбласти

#КонецОбласти